# Generated by Django 5.0 on 2024-10-25 19:57

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('initiatives', '0004_alter_budget_approved_by'),
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ConsultingService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('product_type', models.CharField(choices=[('FOOD', 'Food Item'), ('BEVERAGE', 'Beverage'), ('MERCHANDISE', 'Merchandise'), ('SERVICE', 'Service')], max_length=20)),
                ('description', models.TextField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('cost_price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('available_channels', models.TextField()),
                ('stock_quantity', models.IntegerField(default=0)),
                ('image', models.ImageField(blank=True, upload_to='product_images/')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='AnnualBudget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fiscal_year', models.CharField(max_length=10)),
                ('total_budget', models.DecimalField(decimal_places=2, max_digits=12)),
                ('staff_salaries', models.DecimalField(decimal_places=2, max_digits=12)),
                ('operational_costs', models.DecimalField(decimal_places=2, max_digits=12)),
                ('program_costs', models.DecimalField(decimal_places=2, max_digits=12)),
                ('marketing_costs', models.DecimalField(decimal_places=2, max_digits=12)),
                ('contingency_fund', models.DecimalField(decimal_places=2, max_digits=12)),
                ('detailed_breakdown', models.JSONField()),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('REVIEW', 'Under Review'), ('APPROVED', 'Approved'), ('ACTIVE', 'Active'), ('CLOSED', 'Closed')], default='DRAFT', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='annual_approved_budgets', to='users.member')),
                ('prepared_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prepared_budgets', to='users.member')),
            ],
        ),
        migrations.CreateModel(
            name='BudgetTracking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.DateField()),
                ('category', models.CharField(max_length=50)),
                ('budgeted_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('actual_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('variance_explanation', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('annual_budget', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracking_records', to='sustainability.annualbudget')),
                ('recorded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='budget_records', to='users.member')),
            ],
        ),
        migrations.CreateModel(
            name='ConsultingEngagement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_name', models.CharField(max_length=255)),
                ('client_organization', models.CharField(max_length=255)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('status', models.CharField(choices=[('PLANNED', 'Planned'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='PLANNED', max_length=20)),
                ('contract_value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_status', models.CharField(choices=[('PENDING', 'Pending'), ('PARTIAL', 'Partially Paid'), ('COMPLETED', 'Fully Paid')], max_length=20)),
                ('deliverables_status', models.JSONField(help_text='JSON object tracking deliverable completion')),
                ('feedback', models.TextField(blank=True)),
                ('satisfaction_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('contract_document', models.FileField(blank=True, upload_to='consulting_contracts/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('consultant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consulting_engagements', to='users.member')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='engagements', to='sustainability.consultingservice')),
            ],
        ),
        migrations.CreateModel(
            name='CorporatePartner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('category', models.CharField(choices=[('CSR', 'CSR Partner'), ('TECHNICAL', 'Technical Partner'), ('FUNDING', 'Funding Partner'), ('IMPLEMENTATION', 'Implementation Partner')], max_length=20)),
                ('csr_focus_areas', models.TextField()),
                ('contact_person', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=20)),
                ('address', models.TextField()),
                ('partnership_history', models.TextField(blank=True)),
                ('total_funding', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('current_engagement', models.TextField()),
                ('branding_requirements', models.TextField(blank=True)),
                ('mou_document', models.FileField(blank=True, upload_to='partner_docs/')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('relationship_manager', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_partners', to='users.member')),
            ],
        ),
        migrations.CreateModel(
            name='FranchiseModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('operational_guidelines', models.TextField()),
                ('training_modules', models.JSONField()),
                ('branding_guidelines', models.TextField()),
                ('setup_cost', models.DecimalField(decimal_places=2, max_digits=10)),
                ('revenue_model', models.TextField()),
                ('support_services', models.TextField()),
                ('legal_requirements', models.TextField()),
                ('franchise_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('royalty_structure', models.TextField()),
                ('toolkit_documents', models.FileField(blank=True, upload_to='franchise_docs/')),
                ('status', models.CharField(choices=[('DEVELOPMENT', 'In Development'), ('PILOTING', 'Piloting'), ('ACTIVE', 'Active'), ('SUSPENDED', 'Suspended')], default='DEVELOPMENT', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('developed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='developed_franchises', to='users.member')),
            ],
        ),
        migrations.CreateModel(
            name='FranchiseLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location_name', models.CharField(max_length=255)),
                ('partner_organization', models.CharField(max_length=255)),
                ('address', models.TextField()),
                ('launch_date', models.DateField()),
                ('status', models.CharField(choices=[('SETUP', 'Setup Phase'), ('TRAINING', 'Training Phase'), ('OPERATIONAL', 'Operational'), ('SUSPENDED', 'Suspended')], default='SETUP', max_length=20)),
                ('employees_count', models.IntegerField(default=0)),
                ('monthly_revenue', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('performance_metrics', models.JSONField(default=dict)),
                ('feedback', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('mentor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mentored_locations', to='users.member')),
                ('franchise_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='sustainability.franchisemodel')),
            ],
        ),
        migrations.CreateModel(
            name='FundingProposal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('amount_requested', models.DecimalField(decimal_places=2, max_digits=12)),
                ('executive_summary', models.TextField()),
                ('sdg_alignment', models.TextField()),
                ('program_details', models.TextField()),
                ('budget_breakdown', models.JSONField()),
                ('impact_metrics', models.JSONField()),
                ('timeline', models.JSONField()),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SUBMITTED', 'Submitted'), ('UNDER_REVIEW', 'Under Review'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected')], default='DRAFT', max_length=20)),
                ('submission_date', models.DateField(blank=True, null=True)),
                ('feedback_received', models.TextField(blank=True)),
                ('proposal_document', models.FileField(blank=True, upload_to='proposals/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('corporate_partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='funding_proposals', to='sustainability.corporatepartner')),
                ('initiative', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='funding_proposals', to='initiatives.initiative')),
                ('prepared_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sustainability_prepared_proposals', to='users.member')),
            ],
        ),
        migrations.CreateModel(
            name='ReplicableProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('program_category', models.CharField(choices=[('WORKSHOP', 'Workshop Series'), ('TRAINING', 'Training Program'), ('OUTREACH', 'Outreach Campaign'), ('MENTORSHIP', 'Mentorship Program'), ('SKILL_DEV', 'Skill Development')], max_length=20)),
                ('description', models.TextField()),
                ('objectives', models.TextField()),
                ('target_group', models.TextField()),
                ('key_activities', models.TextField()),
                ('resources_required', models.TextField()),
                ('implementation_guide', models.TextField()),
                ('success_metrics', models.JSONField()),
                ('training_materials', models.FileField(blank=True, upload_to='program_materials/')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('PILOTING', 'Piloting'), ('VALIDATED', 'Validated'), ('READY', 'Ready for Replication'), ('ACTIVE', 'Actively Replicated')], default='DRAFT', max_length=20)),
                ('replication_cost', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('timeline', models.JSONField(help_text='JSON object containing implementation timeline')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('developed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='developed_programs', to='users.member')),
                ('initiative', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='replicable_programs', to='initiatives.initiative')),
            ],
        ),
        migrations.CreateModel(
            name='ProgramReplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(max_length=255)),
                ('implementing_partner', models.TextField()),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('status', models.CharField(choices=[('PLANNED', 'Planned'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('SUSPENDED', 'Suspended')], max_length=20)),
                ('participants_count', models.IntegerField(default=0)),
                ('budget_allocated', models.DecimalField(decimal_places=2, max_digits=10)),
                ('actual_spent', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('success_metrics_achieved', models.JSONField(default=dict)),
                ('challenges_faced', models.TextField(blank=True)),
                ('learnings', models.TextField(blank=True)),
                ('supporting_documents', models.FileField(blank=True, upload_to='replication_docs/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('coordinator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coordinated_replications', to='users.member')),
                ('replicable_program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='replications', to='sustainability.replicableprogram')),
            ],
        ),
        migrations.CreateModel(
            name='SocialEnterpriseMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_type', models.CharField(choices=[('FINANCIAL', 'Financial Metrics'), ('IMPACT', 'Impact Metrics'), ('OPERATIONAL', 'Operational Metrics')], max_length=20)),
                ('report_date', models.DateField()),
                ('total_product_revenue', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('total_products_sold', models.IntegerField(default=0)),
                ('best_selling_products', models.JSONField(help_text='JSON object containing top selling products')),
                ('consulting_revenue', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('engagements_completed', models.IntegerField(default=0)),
                ('client_satisfaction', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('franchise_revenue', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('active_franchises', models.IntegerField(default=0)),
                ('franchise_performance', models.JSONField(help_text='JSON object containing franchise performance data')),
                ('jobs_created', models.IntegerField(default=0)),
                ('beneficiaries_impacted', models.IntegerField(default=0)),
                ('social_return', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('recorded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recorded_metrics', to='users.member')),
            ],
            options={
                'verbose_name_plural': 'Social Enterprise Metrics',
                'ordering': ['-report_date'],
            },
        ),
        migrations.CreateModel(
            name='SustainabilityReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_type', models.CharField(choices=[('MONTHLY', 'Monthly Report'), ('QUARTERLY', 'Quarterly Report'), ('ANNUAL', 'Annual Report')], max_length=20)),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('revenue_streams', models.JSONField(help_text='JSON object containing revenue breakdown')),
                ('total_revenue', models.DecimalField(decimal_places=2, max_digits=12)),
                ('total_expenses', models.DecimalField(decimal_places=2, max_digits=12)),
                ('financial_sustainability_ratio', models.FloatField()),
                ('active_programs', models.IntegerField()),
                ('program_metrics', models.JSONField(help_text='JSON object containing program performance data')),
                ('replication_status', models.JSONField(help_text='JSON object containing replication progress')),
                ('active_partnerships', models.IntegerField()),
                ('partnership_value', models.DecimalField(decimal_places=2, max_digits=12)),
                ('partner_satisfaction', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('beneficiaries_reached', models.IntegerField()),
                ('impact_metrics', models.JSONField(help_text='JSON object containing impact data')),
                ('community_feedback', models.TextField()),
                ('growth_projections', models.TextField()),
                ('sustainability_initiatives', models.TextField()),
                ('risk_assessment', models.TextField()),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('REVIEW', 'Under Review'), ('APPROVED', 'Approved'), ('PUBLISHED', 'Published')], default='DRAFT', max_length=20)),
                ('report_file', models.FileField(blank=True, upload_to='sustainability_reports/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('prepared_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sustainability_reports', to='users.member')),
            ],
            options={
                'ordering': ['-period_end'],
                'unique_together': {('report_type', 'period_start', 'period_end')},
            },
        ),
    ]
