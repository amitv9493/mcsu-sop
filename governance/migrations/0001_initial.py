# Generated by Django 5.0 on 2024-10-25 12:11

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('initiatives', '0002_initial'),
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CSRProposal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('company_name', models.CharField(max_length=255)),
                ('submission_deadline', models.DateField()),
                ('requested_amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('approved_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('REVIEW', 'Under Review'), ('SUBMITTED', 'Submitted'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('AWARDED', 'Awarded')], default='DRAFT', max_length=20)),
                ('executive_summary', models.TextField()),
                ('alignment_with_sdgs', models.TextField()),
                ('budget_breakdown', models.TextField()),
                ('impact_metrics', models.TextField()),
                ('partnership_details', models.TextField()),
                ('submission_date', models.DateField(blank=True, null=True)),
                ('feedback_received', models.TextField(blank=True)),
                ('proposal_document', models.FileField(blank=True, upload_to='csr_proposals/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('initiative', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='csr_proposals', to='initiatives.initiative')),
                ('prepared_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prepared_proposals', to='users.member')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_proposals', to='users.member')),
            ],
        ),
        migrations.CreateModel(
            name='GovernanceBody',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('committee_type', models.CharField(choices=[('OVERSIGHT', 'Oversight Committee'), ('FINANCE', 'Finance Committee'), ('AUDIT', 'Audit Committee'), ('PROGRAM', 'Program Committee')], max_length=20)),
                ('description', models.TextField()),
                ('formation_date', models.DateField()),
                ('tenure_end_date', models.DateField()),
                ('meeting_frequency', models.CharField(choices=[('WEEKLY', 'Weekly'), ('BIWEEKLY', 'Bi-weekly'), ('MONTHLY', 'Monthly'), ('QUARTERLY', 'Quarterly')], max_length=50)),
                ('quorum_requirement', models.TextField()),
                ('terms_of_reference', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('chairperson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chaired_committees', to='users.member')),
                ('members', models.ManyToManyField(related_name='committee_memberships', to='users.member')),
                ('secretary', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='secretary_committees', to='users.member')),
            ],
        ),
        migrations.CreateModel(
            name='GovernanceMeeting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meeting_date', models.DateTimeField()),
                ('agenda', models.TextField()),
                ('minutes', models.TextField()),
                ('decisions_made', models.TextField()),
                ('action_items', models.TextField()),
                ('next_meeting_date', models.DateTimeField()),
                ('attachments', models.FileField(blank=True, upload_to='meeting_documents/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('attendees', models.ManyToManyField(related_name='attended_meetings', to='users.member')),
                ('governance_body', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meetings', to='governance.governancebody')),
            ],
        ),
        migrations.CreateModel(
            name='GovernanceReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_type', models.CharField(choices=[('MONTHLY', 'Monthly Report'), ('QUARTERLY', 'Quarterly Report'), ('ANNUAL', 'Annual Report')], max_length=20)),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('executive_summary', models.TextField()),
                ('progress_overview', models.TextField()),
                ('financial_overview', models.TextField()),
                ('challenges_risks', models.TextField()),
                ('recommendations', models.TextField()),
                ('attachments', models.FileField(blank=True, upload_to='governance_reports/')),
                ('submitted_date', models.DateField()),
                ('approval_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_reports', to='users.member')),
                ('prepared_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prepared_reports', to='users.member')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectTimeline',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('priority', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('URGENT', 'Urgent')], default='MEDIUM', max_length=20)),
                ('status', models.CharField(choices=[('NOT_STARTED', 'Not Started'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('DELAYED', 'Delayed'), ('ON_HOLD', 'On Hold')], default='NOT_STARTED', max_length=20)),
                ('progress', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('tool_link', models.URLField(blank=True, help_text='Link to task in project management tool')),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='governance_assigned_tasks', to='users.member')),
                ('dependencies', models.ManyToManyField(blank=True, related_name='dependent_tasks', to='governance.projecttimeline')),
                ('initiative', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_timelines', to='initiatives.initiative')),
            ],
        ),
        migrations.CreateModel(
            name='ResourceAllocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resource_type', models.CharField(choices=[('STAFF', 'Staff Salaries'), ('MATERIALS', 'Materials'), ('VENUE', 'Venue Rental'), ('TRANSPORT', 'Transportation'), ('TECHNOLOGY', 'Technology'), ('MARKETING', 'Marketing'), ('OTHER', 'Other')], max_length=20)),
                ('description', models.TextField()),
                ('estimated_cost', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('actual_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('status', models.CharField(choices=[('REQUESTED', 'Requested'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed')], default='REQUESTED', max_length=20)),
                ('requested_date', models.DateField(auto_now_add=True)),
                ('required_by_date', models.DateField()),
                ('procurement_date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_resources', to='users.member')),
                ('initiative', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_allocations', to='initiatives.initiative')),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_requests', to='users.member')),
            ],
        ),
        migrations.CreateModel(
            name='RiskAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('risk_type', models.CharField(choices=[('POLITICAL', 'Political Risk'), ('FUNDING', 'Funding Risk'), ('OPERATIONAL', 'Operational Risk'), ('REPUTATIONAL', 'Reputational Risk'), ('COMPLIANCE', 'Compliance Risk'), ('SECURITY', 'Security Risk')], max_length=20)),
                ('description', models.TextField()),
                ('likelihood', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High')], max_length=20)),
                ('impact', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High')], max_length=20)),
                ('status', models.CharField(choices=[('IDENTIFIED', 'Identified'), ('MONITORED', 'Being Monitored'), ('MITIGATED', 'Mitigated'), ('OCCURRED', 'Risk Occurred'), ('CLOSED', 'Closed')], default='IDENTIFIED', max_length=20)),
                ('identification_date', models.DateField(auto_now_add=True)),
                ('last_review_date', models.DateField(auto_now=True)),
                ('next_review_date', models.DateField()),
                ('mitigation_plan', models.TextField()),
                ('contingency_plan', models.TextField()),
                ('fallback_strategy', models.TextField()),
                ('actual_impact', models.TextField(blank=True)),
                ('resolution_date', models.DateField(blank=True, null=True)),
                ('lessons_learned', models.TextField(blank=True)),
                ('attachments', models.FileField(blank=True, upload_to='risk_documents/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assigned_risks', to='users.member')),
                ('identified_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='identified_risks', to='users.member')),
                ('initiative', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='risk_assessments', to='initiatives.initiative')),
            ],
        ),
        migrations.CreateModel(
            name='TeamRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_type', models.CharField(choices=[('PROGRAM_MANAGER', 'Program Manager'), ('FIELD_COORDINATOR', 'Field Coordinator'), ('ME_OFFICER', 'M&E Officer'), ('FINANCE_OFFICER', 'Finance Officer'), ('COMMUNICATIONS_LEAD', 'Communications Lead')], max_length=50)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('responsibilities', models.TextField()),
                ('tools_used', models.TextField(help_text='List of tools used (e.g., Asana, Trello)')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('initiatives', models.ManyToManyField(related_name='team_members', to='initiatives.initiative')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_roles', to='users.member')),
                ('reporting_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='team_members', to='governance.teamrole')),
            ],
            options={
                'unique_together': {('member', 'role_type', 'is_active')},
            },
        ),
    ]
