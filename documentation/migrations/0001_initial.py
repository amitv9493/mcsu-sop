# Generated by Django 5.0 on 2024-10-25 19:38

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('initiatives', '0003_alter_task_assigned_to'),
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ImpactStory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('story_type', models.CharField(choices=[('SUCCESS', 'Success Story'), ('TRANSFORMATION', 'Transformation Journey'), ('TESTIMONIAL', 'Participant Testimonial'), ('CASE_STUDY', 'Case Study')], max_length=20)),
                ('participant_name', models.CharField(max_length=255)),
                ('is_anonymous', models.BooleanField(default=False)),
                ('sdg_alignment', models.CharField(choices=[('SDG5', 'SDG 5: Gender Equality'), ('SDG8', 'SDG 8: Decent Work and Economic Growth')], max_length=10)),
                ('challenge_description', models.TextField()),
                ('solution_provided', models.TextField()),
                ('outcome', models.TextField()),
                ('testimonial', models.TextField()),
                ('metrics_achieved', models.JSONField(help_text='JSON object containing relevant metrics and their values')),
                ('media_attachments', models.FileField(blank=True, upload_to='impact_stories/')),
                ('approval_status', models.CharField(choices=[('DRAFT', 'Draft'), ('REVIEW', 'Under Review'), ('APPROVED', 'Approved'), ('PUBLISHED', 'Published')], default='DRAFT', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_stories', to='users.member')),
                ('collected_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collected_stories', to='users.member')),
                ('initiative', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='impact_stories', to='initiatives.initiative')),
            ],
            options={
                'verbose_name_plural': 'Impact Stories',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DocumentTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('template_type', models.CharField(choices=[('PROGRESS', 'Progress Report'), ('FEEDBACK', 'Feedback Form'), ('CSR', 'CSR Report'), ('IMPACT', 'Impact Story'), ('LOGBOOK', 'Logbook Entry')], max_length=20)),
                ('description', models.TextField()),
                ('template_content', models.JSONField(help_text='JSON structure defining template fields and their properties')),
                ('is_active', models.BooleanField(default=True)),
                ('version', models.PositiveIntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documentation_templates', to='users.member')),
            ],
            options={
                'ordering': ['-version'],
                'unique_together': {('template_type', 'version')},
            },
        ),
        migrations.CreateModel(
            name='CSRReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_type', models.CharField(choices=[('MONTHLY', 'Monthly Update'), ('QUARTERLY', 'Quarterly Report'), ('ANNUAL', 'Annual Impact Report')], max_length=20)),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('sdg5_metrics', models.JSONField(help_text='JSON object containing SDG 5 related metrics')),
                ('sdg8_metrics', models.JSONField(help_text='JSON object containing SDG 8 related metrics')),
                ('executive_summary', models.TextField()),
                ('program_highlights', models.TextField()),
                ('beneficiary_impact', models.TextField()),
                ('sdg_alignment_narrative', models.TextField()),
                ('challenges_learnings', models.TextField()),
                ('future_plans', models.TextField()),
                ('dashboard_link', models.URLField(blank=True, help_text='Link to Google Data Studio dashboard')),
                ('budget_utilized', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('cost_per_beneficiary', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('REVIEW', 'Under Review'), ('APPROVED', 'Approved'), ('PUBLISHED', 'Published')], default='DRAFT', max_length=20)),
                ('report_file', models.FileField(blank=True, upload_to='csr_reports/')),
                ('stakeholder_feedback', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('initiative', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='csr_reports', to='initiatives.initiative')),
                ('prepared_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prepared_csr_reports', to='users.member')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_csr_reports', to='users.member')),
                ('featured_stories', models.ManyToManyField(related_name='featured_in_reports', to='documentation.impactstory')),
            ],
            options={
                'ordering': ['-period_end', 'report_type'],
                'unique_together': {('initiative', 'report_type', 'period_start', 'period_end')},
            },
        ),
        migrations.CreateModel(
            name='ProgramLogbook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('activity_type', models.CharField(choices=[('WORKSHOP', 'Workshop Session'), ('OUTREACH', 'Outreach Campaign'), ('TRAINING', 'Training Program'), ('MEETING', 'Stakeholder Meeting'), ('EVENT', 'Community Event'), ('OTHER', 'Other Activity')], max_length=20)),
                ('activity_description', models.TextField()),
                ('participants_count', models.PositiveIntegerField(default=0)),
                ('milestone_reached', models.TextField(blank=True)),
                ('challenges_faced', models.TextField(blank=True)),
                ('next_steps', models.TextField()),
                ('attachments', models.FileField(blank=True, upload_to='logbook_docs/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('initiative', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logbook_entries', to='initiatives.initiative')),
                ('recorded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logbook_entries', to='users.member')),
            ],
            options={
                'ordering': ['-date'],
                'indexes': [models.Index(fields=['date'], name='documentati_date_2813c4_idx'), models.Index(fields=['activity_type'], name='documentati_activit_74379b_idx')],
            },
        ),
    ]
