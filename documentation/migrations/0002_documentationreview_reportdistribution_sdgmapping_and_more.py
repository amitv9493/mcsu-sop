# Generated by Django 5.0 on 2024-10-25 19:45

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('documentation', '0001_initial'),
        ('initiatives', '0003_alter_task_assigned_to'),
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DocumentationReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review_type', models.CharField(choices=[('QUARTERLY', 'Quarterly Logbook Review'), ('ANNUAL', 'Annual Documentation Audit'), ('ADHOC', 'Ad-hoc Review')], max_length=20)),
                ('review_date', models.DateField()),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('completeness_check', models.TextField(help_text='Assessment of documentation completeness')),
                ('quality_assessment', models.TextField()),
                ('identified_gaps', models.TextField()),
                ('recommendations', models.TextField()),
                ('action_items', models.TextField()),
                ('follow_up_date', models.DateField()),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed')], default='PENDING', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('initiative', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documentation_reviews', to='initiatives.initiative')),
                ('reviewed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conducted_doc_reviews', to='users.member')),
            ],
            options={
                'ordering': ['-review_date'],
            },
        ),
        migrations.CreateModel(
            name='ReportDistribution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_type', models.CharField(choices=[('PROGRESS', 'Progress Report'), ('CSR', 'CSR Report'), ('IMPACT', 'Impact Report')], max_length=20)),
                ('object_id', models.PositiveIntegerField()),
                ('distribution_date', models.DateField()),
                ('distribution_method', models.CharField(choices=[('EMAIL', 'Email'), ('MEETING', 'Governance Meeting'), ('PRESENTATION', 'Stakeholder Presentation')], max_length=20)),
                ('recipients', models.TextField(help_text='List of recipients/stakeholders')),
                ('feedback_received', models.TextField(blank=True)),
                ('acknowledgment_status', models.BooleanField(default=False)),
                ('follow_up_required', models.BooleanField(default=False)),
                ('follow_up_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('distributed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='distributed_reports', to='users.member')),
            ],
            options={
                'ordering': ['-distribution_date'],
            },
        ),
        migrations.CreateModel(
            name='SDGMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sdg', models.CharField(choices=[('SDG5', 'SDG 5: Gender Equality'), ('SDG8', 'SDG 8: Decent Work and Economic Growth')], max_length=10)),
                ('program_outcome', models.TextField()),
                ('impact_area', models.TextField()),
                ('metrics', models.JSONField(help_text='JSON object containing metrics and targets')),
                ('baseline_value', models.FloatField(blank=True, null=True)),
                ('target_value', models.FloatField()),
                ('current_value', models.FloatField(default=0)),
                ('measurement_method', models.TextField()),
                ('data_source', models.TextField()),
                ('collection_frequency', models.CharField(choices=[('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly'), ('QUARTERLY', 'Quarterly'), ('ANNUAL', 'Annual')], max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('initiative', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sdg_mappings', to='initiatives.initiative')),
                ('responsible_person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monitored_sdgs', to='users.member')),
            ],
            options={
                'ordering': ['sdg', '-created_at'],
                'unique_together': {('initiative', 'sdg')},
            },
        ),
        migrations.CreateModel(
            name='SDGProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_date', models.DateField()),
                ('value', models.FloatField()),
                ('evidence', models.TextField()),
                ('supporting_documents', models.FileField(blank=True, upload_to='sdg_evidence/')),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('recorded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recorded_sdg_progress', to='users.member')),
                ('sdg_mapping', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progress_records', to='documentation.sdgmapping')),
            ],
            options={
                'ordering': ['-record_date'],
            },
        ),
        migrations.CreateModel(
            name='ProgressReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reporting_period', models.CharField(choices=[('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly'), ('QUARTERLY', 'Quarterly'), ('ANNUAL', 'Annual')], max_length=20)),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('executive_summary', models.TextField()),
                ('achievements', models.TextField()),
                ('challenges', models.TextField()),
                ('kpi_updates', models.JSONField(help_text='JSON object containing KPI updates')),
                ('financial_summary', models.TextField()),
                ('next_steps', models.TextField()),
                ('review_comments', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SUBMITTED', 'Submitted'), ('REVIEWED', 'Reviewed'), ('APPROVED', 'Approved')], default='DRAFT', max_length=20)),
                ('report_file', models.FileField(blank=True, upload_to='progress_reports/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('initiative', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progress_reports', to='initiatives.initiative')),
                ('prepared_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prepared_progress_reports', to='users.member')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_progress_reports', to='users.member')),
            ],
            options={
                'ordering': ['-period_end', 'reporting_period'],
                'unique_together': {('initiative', 'period_start', 'period_end')},
            },
        ),
    ]
