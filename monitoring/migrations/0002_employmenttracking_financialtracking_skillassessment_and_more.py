# Generated by Django 5.0 on 2024-10-25 19:26

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('initiatives', '0003_alter_task_assigned_to'),
        ('monitoring', '0001_initial'),
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='EmploymentTracking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('PLACED', 'Placed in Job'), ('INTERVIEW', 'In Interview Process'), ('SEARCHING', 'Actively Searching'), ('NOT_SEEKING', 'Not Seeking Employment'), ('SELF_EMPLOYED', 'Self Employed')], max_length=20)),
                ('employer_name', models.CharField(blank=True, max_length=255)),
                ('position', models.CharField(blank=True, max_length=255)),
                ('salary_range', models.CharField(blank=True, max_length=100)),
                ('placement_date', models.DateField(blank=True, null=True)),
                ('is_field_related', models.BooleanField(default=True)),
                ('retention_period', models.IntegerField(blank=True, help_text='Employment duration in months', null=True)),
                ('skills_utilized', models.TextField(blank=True)),
                ('feedback_from_employer', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('initiative', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employment_records', to='initiatives.initiative')),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employment_records', to='users.member')),
            ],
        ),
        migrations.CreateModel(
            name='FinancialTracking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.DateField()),
                ('category', models.CharField(choices=[('STAFF', 'Staff Salaries'), ('MATERIALS', 'Materials & Supplies'), ('VENUE', 'Venue Rentals'), ('TRANSPORT', 'Transportation'), ('REFRESHMENTS', 'Refreshments'), ('MARKETING', 'Marketing & Outreach'), ('MISC', 'Miscellaneous')], max_length=20)),
                ('description', models.TextField()),
                ('budgeted_amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('actual_amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('variance_notes', models.TextField(blank=True)),
                ('bills_attachment', models.FileField(blank=True, upload_to='financial_records/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_finances', to='users.member')),
                ('initiative', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='financial_records', to='initiatives.initiative')),
                ('recorded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recorded_finances', to='users.member')),
            ],
            options={
                'ordering': ['-month', 'category'],
            },
        ),
        migrations.CreateModel(
            name='SkillAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_type', models.CharField(choices=[('PRE', 'Pre-Program Assessment'), ('MID', 'Mid-Program Assessment'), ('POST', 'Post-Program Assessment'), ('FOLLOWUP', 'Follow-up Assessment')], max_length=20)),
                ('assessment_date', models.DateField()),
                ('technical_skills', models.JSONField(help_text='JSON object containing skill:rating pairs')),
                ('soft_skills', models.JSONField(help_text='JSON object containing skill:rating pairs')),
                ('confidence_score', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('recommendations', models.TextField(blank=True)),
                ('improvement_areas', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('evaluator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='conducted_assessments', to='users.member')),
                ('initiative', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skill_assessments', to='initiatives.initiative')),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skill_assessments', to='users.member')),
            ],
        ),
        migrations.CreateModel(
            name='QuarterlyImpactReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField()),
                ('quarter', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('total_beneficiaries', models.IntegerField(default=0)),
                ('skill_completion_rate', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('employment_rate', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('avg_confidence_score', models.FloatField(validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(5.0)])),
                ('budget_utilized', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('cost_per_beneficiary', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('key_achievements', models.TextField()),
                ('challenges_faced', models.TextField()),
                ('lessons_learned', models.TextField()),
                ('recommendations', models.TextField()),
                ('next_quarter_focus', models.TextField()),
                ('presentation_file', models.FileField(blank=True, upload_to='quarterly_reviews/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('initiative', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quarterly_reviews', to='initiatives.initiative')),
                ('prepared_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prepared_quarterly_reviews', to='users.member')),
                ('reviewed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_quarterly_reviews', to='users.member')),
            ],
            options={
                'ordering': ['-year', '-quarter'],
                'unique_together': {('initiative', 'year', 'quarter')},
            },
        ),
        migrations.CreateModel(
            name='WeeklyProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week_start_date', models.DateField()),
                ('week_end_date', models.DateField()),
                ('planned_activities', models.TextField()),
                ('completed_activities', models.TextField()),
                ('status', models.CharField(choices=[('ON_TRACK', 'On Track'), ('AT_RISK', 'At Risk'), ('DELAYED', 'Delayed'), ('COMPLETED', 'Completed')], max_length=20)),
                ('bottlenecks', models.TextField(blank=True)),
                ('mitigation_steps', models.TextField(blank=True)),
                ('support_needed', models.TextField(blank=True)),
                ('next_week_plan', models.TextField()),
                ('attachments', models.FileField(blank=True, upload_to='weekly_progress/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('initiative', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weekly_progress', to='initiatives.initiative')),
                ('recorded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recorded_weekly_progress', to='users.member')),
                ('team_members', models.ManyToManyField(related_name='weekly_progress_mentions', to='users.member')),
            ],
            options={
                'ordering': ['-week_start_date'],
                'unique_together': {('initiative', 'week_start_date')},
            },
        ),
    ]
